% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/spinMyR.R
\name{spinMyR}
\alias{spinMyR}
\title{Create markdown/HTML reports from R script with no hassle}
\usage{
spinMyR(file, wd, outDir, figDir, outSuffix, params = list(),
  verbose = FALSE, chunkOpts = list(tidy = FALSE, error = FALSE),
  warn = TRUE, keepRmd = FALSE, keepMd = TRUE)
}
\arguments{
\item{file}{The path to the R script (if \code{wd} is provided, then this
path is relative to \code{wd}).}

\item{wd}{The working directory to be used in the R script. See 'Detailed:
Arguments'.}

\item{outDir}{The output directory (if \code{wd} is provided, then this path
is relative to \code{wd}). Defaults to the directory containing the R script.}

\item{figDir}{The name (or path) of the directory containing the figures
generated for the markdown document. See 'Detailed Arguments'.}

\item{outSuffix}{A suffix to add to the output files, can be used to
differentiate outputs from runs with different parameters. The name of the
output files is the name of the input script appended by \code{outSuffix},
separated by a dash.}

\item{params}{A named list of parameters to be passed on to the R script.
For example, if the script to execute assumes that there is a variable named
\code{DATASET_NAME}, then you can use
\code{params = list('DATASET_NAME' = 'oct10dat')}}

\item{verbose}{If TRUE, then show the progress of knitting the document.}

\item{chunkOpts}{List of chunk options to use. See \code{?knitr::opts_chunk}
for a list of chunk options.}

\item{warn}{If TRUE, then show warnings (recommended to keep this on)}

\item{keepRmd,keepMd}{Should intermediate \code{Rmd} or \code{md} files be
kept (\code{TRUE}) or deleted (\code{FALSE})?}
}
\value{
The path to the output (invisibly).
}
\description{
This function takes a specially formatted R script and converts it to
markdown and HTML documents.  Regular R markdown is written after the
roxygen comment (\code{#'}), and code chunk options are written after
\code{#+}.  All the pain of dealing with working directories and where
files are generated is taken care of.
}
\details{
If you've ever written tried using \code{knitr::spin} and got frustrated
with working directories and where input/output files are, then you'll love
\code{spinMyR}! \code{knitr::spin} is great and easy when all you need to do
is convert an R script to a markdown/HTML and everything lives in the same
directory.  But if you have a real directory structure, this is rarely the
case, and \code{spinMyR} is the solution.  Even something as simple as
using \code{knitr::spin} on a script that reads a file in a different
directory cannot be easily done in a way that allows both running the script
directly and using \code{spin} on it.

\code{spinMyR} improves basic \code{spin} in a few ways. You get to decide:

- What the working directory of the R script is

- Where the output files will go

- Where the figures used in the markdown will go

- If there are any parameters to pass to the R script
}
\section{Possible future improvements}{

- Add support to only produce one of [Rmd, md, HTML]
}

\section{Detailed Arguments}{

All paths given in the arguments can be either absolute or relative.

The \code{wd} argument is very important and is set to the current working
directory by default. The path of the input file and the path of the output
directory are both relative to \code{wd} (unless they are absolute paths).
Moreover, any code in the R script that reads or writes files will use
\code{wd} as the working directory.

The \code{figDir} argument is relative to the output directory, since the
figures accompanying a markdown file should ideally be placed in the same
directory. It is recommended to either leave \code{figDir} as default or
set it to a different name but not to a different directory. Because of the
way \code{knitr} works, there are a few known minor issues if \code{figDir}
is set to a different directory.
}
\examples{
\dontrun{
if (requireNamespace("knitr", quietly = TRUE)) {
  if (requireNamespace("markdown", quietly = TRUE)) {
     spinMyR("R/script.R")
     spinMyR("script.R", wd = "R")
     spinMyR("script.R", wd = "R", params = c(id = 10))
     spinMyR("script.R", wd = "R", params = c(id = 10), outSuffix = "id-10")
     spinMyR("script.R", wd = "R", outDir = "reports")
     spinMyR("script.R", wd = "R", outDir = "reports",
              figDir = "figs")
  }
}
}
}
\seealso{
\code{\link[knitr]{spin}}

\code{\link[rsalad]{setupSpinMyRtest}}
}

